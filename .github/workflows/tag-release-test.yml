name: Tag Release Test

on:
  # 手动触发方便验证流程
  workflow_dispatch:

# 需要写权限以创建 Release
permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # 手动触发时也允许指定 tag / 分支
          ref: ${{ github.ref }}

      # 将 tag 版本号写入环境变量（去掉 v 前缀）
      - name: Derive VERSION from tag (if any)
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      # 若非 tag 触发，从 package.json 读取版本号
      - name: Derive VERSION from package.json (fallback)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV

  # 使用与正式流程几乎相同的矩阵，但不进行真正编译，仅生成占位文件
  build:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
          - os: windows-2022
          - os: macos-13
            platform: macos
            arch: x64
          - os: macos-14
            platform: macos
            arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      # 创建占位文件以模拟打包产物结构
      - name: Generate placeholder bundles
        shell: bash
        run: |
          set -euxo pipefail
          VERSION="${VERSION:-0.0.0}"
          # 创建 bundle 目录结构
          mkdir -p src-tauri/target/release/bundle/dmg
          mkdir -p src-tauri/target/release/bundle/appimage
          mkdir -p src-tauri/target/release/bundle/deb
          mkdir -p src-tauri/target/release/bundle/rpm
          mkdir -p src-tauri/target/release/bundle/nsis
          mkdir -p src-tauri/target/release/bundle/msi
          mkdir -p src-tauri/target/release/bundle/macos
          # 根据操作系统生成占位文件
          if [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
            touch src-tauri/target/release/bundle/appimage/Chatless_${VERSION}_amd64.AppImage
            touch src-tauri/target/release/bundle/deb/Chatless_${VERSION}_amd64.deb
            touch src-tauri/target/release/bundle/rpm/Chatless-${VERSION}-1.x86_64.rpm
          elif [[ "${{ matrix.os }}" == "windows-2022" ]]; then
            touch src-tauri/target/release/bundle/nsis/Chatless_${VERSION}_x64-setup.exe
            touch src-tauri/target/release/bundle/msi/Chatless_${VERSION}_x64_en-US.msi
          elif [[ "${{ matrix.os }}" == "macos-13" ]]; then
            touch src-tauri/target/release/bundle/macos/Chatless.app.tar.gz
            # macOS x64 dmg + 签名/校验文件
            mkdir -p src-tauri/target/release/bundle/dmg
            touch src-tauri/target/release/bundle/dmg/Chatless_${VERSION}_x64.dmg
            touch src-tauri/target/release/bundle/dmg/Chatless_${VERSION}_x64.dmg.sig
            touch src-tauri/target/release/bundle/dmg/Chatless_${VERSION}_x64.dmg.sha256
          elif [[ "${{ matrix.os }}" == "macos-14" ]]; then
            touch src-tauri/target/release/bundle/macos/Chatless.app.tar.gz
            # macOS arm64 dmg + 签名/校验文件
            mkdir -p src-tauri/target/release/bundle/dmg
            touch src-tauri/target/release/bundle/dmg/Chatless_${VERSION}_aarch64.dmg
            touch src-tauri/target/release/bundle/dmg/Chatless_${VERSION}_aarch64.dmg.sig
            touch src-tauri/target/release/bundle/dmg/Chatless_${VERSION}_aarch64.dmg.sha256
          fi

      # 上传与正式流程相同路径的制品，便于后续步骤验证
      - name: Upload placeholder artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chatless-${{ matrix.os }}-${{ matrix.arch || 'unknown' }}
          path: |
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/macos/*.dmg
            src-tauri/target/release/bundle/macos/*.app.tar.gz
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi
          retention-days: 1

  # 使用与正式流程相同的 release 逻辑，验证之后环节
  release:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      - name: Display structure of downloaded files
        run: ls -R artifacts
      # 若需要，可在此复用正式 tag-release.yml 中的其它脚本步骤，例如重命名 + 生成 release_notes.md
      - name: Create quick placeholder release notes
        run: echo "Test release – no real binaries" > release_notes.md

      - name: Create GitHub Release (test)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Test Release ${{ github.ref_name }}
          body_path: release_notes.md
          files: artifacts/**/*
          draft: false
          prerelease: true
